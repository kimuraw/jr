#!/usr/bin/env ruby
# coding: utf-8

require 'jr/cli/version'
require 'optparse'
require 'yajl'

opt = OptionParser.new
opt.banner  = "jr - Command-line JSON processor for Rubyists [Ver. #{Jr::Cli::VERSION}]\n\n" +
              "Usage: jr [options] <jr filter> [file...]"
opt.version = Jr::Cli::VERSION
opt.on('-r FILE', 'require the FILE before execution') {|file| require file }
pretty = true
opt.on('-c', '--compact-output', 'output each JSON in single line') { pretty = false }
raw_output = false
opt.on('--raw-output', 'output strings as raw output') { raw_output = true }
opt.parse! ARGV

require 'jr/cli/core_ext'

trap('INT') { exit 130 }

inputs = ARGV[1] ? ARGV[1..-1].map {|f| open f } : [STDIN]
result = Enumerator.new do |yielder|
  inputs.each do |input|
    Yajl::Parser.new(symbolize_keys: true).parse(input) do |d|
      yielder.yield d
    end
  end
end.lazy.instance_eval(ARGV[0])

encoder = Yajl::Encoder.new(pretty: pretty)
print_json = ->(data) do
  if raw_output and data.is_a? String
    puts data
  else
    puts encoder.encode(data)
  end
end

if result.is_a? Array or result.kind_of? Enumerator
  result.each do |data|
    print_json.call data
  end
else
  print_json.call result
end
